name: Normalize web/web.srt line endings to LF

on:
  push:
    paths:
      - 'web/web.srt'

permissions:
  contents: write

jobs:
  normalize-srt:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 保留完整历史以便读取最近提交信息
          fetch-depth: 0

      - name: Get last commit info for web/web.srt
        id: last_commit
        run: |
          # 找到最近修改 web/web.srt 的提交（本次 push 的提交）
          # 尝试获取推送的 HEAD commit 的 message，若失败回退到最近修改该文件的提交
          HEAD_SHA="${{ github.sha }}"
          # 如果 github.event.head_commit 存在，优先用它
          if [ -n "${GITHUB_EVENT_HEAD_COMMIT:-}" ]; then
            echo "using head commit from event"
          fi
          # 取得最近修改该路径的提交信息（subject + body）
          LAST_COMMIT_MSG=$(git log -n 1 --pretty=format:%B -- web/web.srt || true)
          if [ -z "$LAST_COMMIT_MSG" ]; then
            LAST_COMMIT_MSG="Normalize line endings in web/web.srt"
          fi
          # 也导出原作者名字和邮箱以便记录在 outputs（仅信息性）
          LAST_AUTHOR_NAME=$(git log -n 1 --pretty=format:%an -- web/web.srt || echo "GitHub Actions")
          LAST_AUTHOR_EMAIL=$(git log -n 1 --pretty=format:%ae -- web/web.srt || echo "actions@github.com")
          echo "::set-output name=message::${LAST_COMMIT_MSG}"
          echo "::set-output name=author_name::${LAST_AUTHOR_NAME}"
          echo "::set-output name=author_email::${LAST_AUTHOR_EMAIL}"

      - name: Check and normalize line endings
        id: check
        run: |
          FILE=web/web.srt
          if [ ! -f "$FILE" ]; then
            echo "file_missing=true" >> $GITHUB_OUTPUT
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 检查是否存在 CRLF（\r\n）
          if grep -q $'\r' "$FILE"; then
            echo "found_crlf=true"
            # 备份原始文件编码并替换 CRLF -> LF
            # 使用 perl 兼容处理任意二进制
            perl -0777 -pe 's/\r\n/\n/g' "$FILE" > "${FILE}.normalized"
            mv "${FILE}.normalized" "$FILE"
            git add "$FILE"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "found_crlf=false"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and force-push if changed
        if: steps.check.outputs.changed == 'true'
        env:
          GIT_AUTHOR_NAME: ${{ steps.last_commit.outputs.author_name }}
          GIT_AUTHOR_EMAIL: ${{ steps.last_commit.outputs.author_email }}
          COMMIT_MESSAGE: ${{ steps.last_commit.outputs.message }}
        run: |
          # 配置 git 用户（作者使用原始提交的作者信息，committer 为 actions bot）
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

          # 使用原始提交信息（保持换行、body 等）
          git commit -m "$COMMIT_MESSAGE" -- web/web.srt || {
            echo "commit failed or nothing to commit"
            exit 1
          }

          # 强制推送当前分支（覆盖远端）
          # 取得当前分支名
          BRANCH="${GITHUB_REF#refs/heads/}"
          # 使用 token 推送
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "HEAD:${BRANCH}" --force

