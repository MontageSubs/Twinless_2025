name: Normalize web/web.srt line endings and archive to srt-lf-archive

on:
  push:
    paths:
      - 'web/web.srt'

permissions:
  contents: write

jobs:
  normalize-and-archive:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect last commit info for web/web.srt
        id: last_commit
        run: |
          FILE=web/web.srt
          if [ ! -f "$FILE" ]; then
            echo "file_missing=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          LAST_COMMIT_MSG=$(git log -n 1 --pretty=format:%B -- "$FILE" || true)
          if [ -z "$LAST_COMMIT_MSG" ]; then
            LAST_COMMIT_MSG="Normalize line endings in web/web.srt"
          fi
          echo "$LAST_COMMIT_MSG" > commit_message.txt

          LAST_AUTHOR_NAME=$(git log -n 1 --pretty=format:%an -- "$FILE" || echo "${{ github.actor }}")
          LAST_AUTHOR_EMAIL=$(git log -n 1 --pretty=format:%ae -- "$FILE" || echo "${{ github.actor }}@users.noreply.github.com")

          echo "::set-output name=message_file::commit_message.txt"
          echo "::set-output name=author_name::${LAST_AUTHOR_NAME}"
          echo "::set-output name=author_email::${LAST_AUTHOR_EMAIL}"

      - name: Check and normalize original branch's file to LF (and commit if changed)
        id: check
        run: |
          FILE=web/web.srt
          if [ ! -f "$FILE" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # 检查是否含 CR (\r)
          if grep -q $'\r' "$FILE"; then
            # 将原分支文件规范为 LF（修改工作区）
            perl -0777 -pe 's/\r\n/\n/g; s/\r/\n/g' "$FILE" > "${FILE}.normalized"
            mv "${FILE}.normalized" "$FILE"
            git add "$FILE"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Prepare normalized copy for archive (always create LF-normalized file)
        id: prepare_archive
        run: |
          SRC=web/web.srt
          TMP=./srt_to_archive.srt
          if [ ! -f "$SRC" ]; then
            echo "missing=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          cp "$SRC" "$TMP"
          perl -0777 -pe 's/\r\n/\n/g; s/\r/\n/g' "$TMP" > "${TMP}.normalized"
          mv "${TMP}.normalized" "$TMP"
          echo "::set-output name=normalized_path::${TMP}"

      - name: Commit LF fix back to original branch (if changed)
        if: steps.check.outputs.changed == 'true'
        env:
          ORIGINAL_AUTHOR_NAME: ${{ steps.last_commit.outputs.author_name }}
          ORIGINAL_AUTHOR_EMAIL: ${{ steps.last_commit.outputs.author_email }}
          MESSAGE_FILE: ${{ steps.last_commit.outputs.message_file }}
        run: |
          FILE=web/web.srt
          if [ ! -f "${MESSAGE_FILE}" ]; then
            echo "Message file missing"; exit 1
          fi

          # 把 author 和 committer 都设为原上传者（避免 github-actions[bot] 出现）
          export GIT_AUTHOR_NAME="${ORIGINAL_AUTHOR_NAME}"
          export GIT_AUTHOR_EMAIL="${ORIGINAL_AUTHOR_EMAIL}"
          export GIT_COMMITTER_NAME="${ORIGINAL_AUTHOR_NAME}"
          export GIT_COMMITTER_EMAIL="${ORIGINAL_AUTHOR_EMAIL}"

          # 使用原始 commit message（含 body）
          GIT_AUTHOR_NAME="${ORIGINAL_AUTHOR_NAME}" GIT_AUTHOR_EMAIL="${ORIGINAL_AUTHOR_EMAIL}" \
            GIT_COMMITTER_NAME="${ORIGINAL_AUTHOR_NAME}" GIT_COMMITTER_EMAIL="${ORIGINAL_AUTHOR_EMAIL}" \
            git commit -F "${MESSAGE_FILE}" -- "$FILE" || { echo "commit failed or nothing to commit"; exit 1; }

          # 强制推送回原分支以覆盖（保持你原有行为）
          BRANCH="${GITHUB_REF#refs/heads/}"
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "HEAD:${BRANCH}" --force

      - name: Create/update srt-lf-archive branch with normalized file
        id: archive
        env:
          MESSAGE_FILE: ${{ steps.last_commit.outputs.message_file }}
          AUTHOR_NAME: ${{ steps.last_commit.outputs.author_name }}
          AUTHOR_EMAIL: ${{ steps.last_commit.outputs.author_email }}
        run: |
          ARCHIVE_BRANCH="srt-lf-archive"
          NORMALIZED=${{ steps.prepare_archive.outputs.normalized_path }}
          REPO="https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

          if [ ! -f "$NORMALIZED" ]; then
            echo "no_normalized_file=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          git fetch origin "+refs/heads/*:refs/remotes/origin/*" || true

          if git show-ref --verify --quiet "refs/heads/${ARCHIVE_BRANCH}"; then
            git checkout "${ARCHIVE_BRANCH}"
          else
            git checkout -b "${ARCHIVE_BRANCH}"
          fi

          mkdir -p "$(dirname web/web.srt)"
          cp "$NORMALIZED" web/web.srt

          if git --no-pager diff --exit-code -- web/web.srt; then
            echo "archive_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [ ! -f "${MESSAGE_FILE}" ]; then
            echo "Archive web/web.srt (normalized to LF)" > /tmp/archive_msg.txt
            MESSAGE_FILE=/tmp/archive_msg.txt
          fi

          export GIT_AUTHOR_NAME="${AUTHOR_NAME}"
          export GIT_AUTHOR_EMAIL="${AUTHOR_EMAIL}"
          export GIT_COMMITTER_NAME="${AUTHOR_NAME}"
          export GIT_COMMITTER_EMAIL="${AUTHOR_EMAIL}"

          git add web/web.srt
          git commit -F "${MESSAGE_FILE}" -- web/web.srt || { echo "commit failed or nothing to commit"; exit 1; }

          git push "$REPO" "HEAD:refs/heads/${ARCHIVE_BRANCH}"
          echo "archive_changed=true" >> $GITHUB_OUTPUT

      - name: Summary
        run: |
          echo "Done."

