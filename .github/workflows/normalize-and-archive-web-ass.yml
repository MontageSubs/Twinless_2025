name: Normalize web/web.ass line endings and archive to lf-archive

on:
  push:
    paths:
      - 'web/web.ass'

permissions:
  contents: write

jobs:
  normalize-and-archive:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.check.outputs.changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect last commit info for web/web.ass
        id: last_commit
        run: |
          set -euo pipefail
          FILE=web/web.ass
          echo "DEBUG: checking file exists: $FILE"
          if [ ! -f "$FILE" ]; then
            echo "file_missing=true" >> $GITHUB_OUTPUT
            echo "DEBUG: file missing, exiting collect step"
            exit 0
          fi

          LAST_COMMIT_MSG=$(git log -n 1 --pretty=format:%B -- "$FILE" || true)
          if [ -z "$LAST_COMMIT_MSG" ]; then
            LAST_COMMIT_MSG="Normalize line endings in web/web.ass"
          fi
          printf '%s\n' "$LAST_COMMIT_MSG" > commit_message.txt
          echo "DEBUG: wrote commit_message.txt (len=$(wc -c < commit_message.txt))"

          LAST_AUTHOR_NAME=$(git log -n 1 --pretty=format:%an -- "$FILE" || true)
          LAST_AUTHOR_EMAIL=$(git log -n 1 --pretty=format:%ae -- "$FILE" || true)

          if [ -z "$LAST_AUTHOR_NAME" ]; then
            LAST_AUTHOR_NAME="${{ github.actor }}"
          fi
          if [ -z "$LAST_AUTHOR_EMAIL" ]; then
            LAST_AUTHOR_EMAIL="${{ github.actor }}@users.noreply.github.com"
          fi

          echo "message_file=commit_message.txt" >> $GITHUB_OUTPUT
          echo "author_name=${LAST_AUTHOR_NAME}" >> $GITHUB_OUTPUT
          echo "author_email=${LAST_AUTHOR_EMAIL}" >> $GITHUB_OUTPUT
          echo "DEBUG: last author: ${LAST_AUTHOR_NAME} <${LAST_AUTHOR_EMAIL}>"

      - name: Check and normalize original branch's file to LF (and commit if changed)
        id: check
        run: |
          set -euo pipefail
          FILE=web/web.ass
          echo "DEBUG: checking and normalizing original file: $FILE"
          if [ ! -f "$FILE" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "DEBUG: file missing, nothing changed"
            exit 0
          fi

          if grep -q $'\r' "$FILE"; then
            echo "DEBUG: CR characters found, normalizing to LF"
            perl -0777 -pe 's/\r\n/\n/g; s/\r/\n/g' "$FILE" > "${FILE}.normalized"
            mv "${FILE}.normalized" "$FILE"
            git add "$FILE"
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "DEBUG: no CR characters found"
          fi

      - name: Prepare normalized copy for archive (always create LF-normalized file)
        run: |
          set -euo pipefail
          SRC=web/web.ass
          TMP=./ass_to_archive.ass
          echo "DEBUG: preparing normalized copy from $SRC to $TMP"
          if [ ! -f "$SRC" ]; then
            echo "missing=true" >> $GITHUB_OUTPUT
            echo "DEBUG: source missing"
            exit 0
          fi
          cp "$SRC" "$TMP"
          perl -0777 -pe 's/\r\n/\n/g; s/\r/\n/g' "$TMP" > "${TMP}.normalized"
          mv "${TMP}.normalized" "$TMP"
          if [ ! -f "$TMP" ]; then
            echo "failed_to_create_normalized=true" >> $GITHUB_OUTPUT
            echo "DEBUG: failed to create normalized file"
            exit 1
          fi
          echo "normalized_path=${TMP}" >> $GITHUB_OUTPUT
          echo "DEBUG: normalized file created: $(wc -c < $TMP) bytes"

      - name: Commit LF fix back to original branch (if changed)
        if: steps.check.outputs.changed == 'true'
        env:
          ORIGINAL_AUTHOR_NAME: ${{ steps.last_commit.outputs.author_name }}
          ORIGINAL_AUTHOR_EMAIL: ${{ steps.last_commit.outputs.author_email }}
          MESSAGE_FILE: commit_message.txt
        run: |
          set -euo pipefail
          FILE=web/web.ass
          echo "DEBUG: committing LF fix to original branch for $FILE"
          if [ ! -f "${MESSAGE_FILE}" ]; then
            echo "Message file missing"; exit 1
          fi

          export GIT_AUTHOR_NAME="${ORIGINAL_AUTHOR_NAME}"
          export GIT_AUTHOR_EMAIL="${ORIGINAL_AUTHOR_EMAIL}"
          export GIT_COMMITTER_NAME="${ORIGINAL_AUTHOR_NAME}"
          export GIT_COMMITTER_EMAIL="${ORIGINAL_AUTHOR_EMAIL}"
          git config user.name "${ORIGINAL_AUTHOR_NAME}"
          git config user.email "${ORIGINAL_AUTHOR_EMAIL}"

          git commit -F "${MESSAGE_FILE}" -- "$FILE" || { echo "commit failed or nothing to commit"; exit 1; }

          BRANCH="${GITHUB_REF#refs/heads/}"
          echo "DEBUG: pushing to branch ${BRANCH}"
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" "HEAD:${BRANCH}" --force

      - name: Create/update lf-archive branch with normalized file
        id: archive
        env:
          MESSAGE_FILE: commit_message.txt
          AUTHOR_NAME: ${{ steps.last_commit.outputs.author_name }}
          AUTHOR_EMAIL: ${{ steps.last_commit.outputs.author_email }}
        run: |
          set -euo pipefail
          ARCHIVE_BRANCH="lf-archive"
          NORMALIZED=./ass_to_archive.ass
          REPO="https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"

          echo "DEBUG: archive step start. normalized file: $NORMALIZED"
          if [ ! -f "$NORMALIZED" ]; then
            echo "no_normalized_file=true" >> $GITHUB_OUTPUT
            echo "DEBUG: normalized file missing, exit archive step"
            exit 0
          fi

          echo "DEBUG: fetching origin refs"
          git fetch origin --prune

          # Create or switch to local archive branch, prefer remote if exists
          if git rev-parse --verify --quiet "refs/heads/${ARCHIVE_BRANCH}" >/dev/null; then
            echo "DEBUG: local branch ${ARCHIVE_BRANCH} exists, checking out"
            git checkout "${ARCHIVE_BRANCH}"
          elif git rev-parse --verify --quiet "refs/remotes/origin/${ARCHIVE_BRANCH}" >/dev/null; then
            echo "DEBUG: remote branch origin/${ARCHIVE_BRANCH} exists, creating local from remote"
            git checkout -b "${ARCHIVE_BRANCH}" "origin/${ARCHIVE_BRANCH}"
          else
            echo "DEBUG: no existing branch found, creating new local ${ARCHIVE_BRANCH}"
            git checkout -b "${ARCHIVE_BRANCH}"
          fi

          git status --porcelain --untracked-files=no || true
          echo "DEBUG: setting git committer/author config"
          git config user.name "${AUTHOR_NAME:-github-actions[bot]}"
          git config user.email "${AUTHOR_EMAIL:-actions@github.com}"

          mkdir -p "$(dirname web/web.ass)"
          cp "$NORMALIZED" web/web.ass
          echo "DEBUG: copied normalized to web/web.ass (size=$(wc -c < web/web.ass))"

          if git ls-tree -r --name-only HEAD | grep -qx "web/web.ass"; then
            echo "DEBUG: web/web.ass exists in HEAD. comparing blobs..."
            if git show HEAD:web/web.ass | cmp -s - "$NORMALIZED"; then
              echo "archive_changed=false" >> $GITHUB_OUTPUT
              echo "DEBUG: HEAD web/web.ass identical to normalized, skipping commit"
              exit 0
            else
              echo "DEBUG: HEAD web/web.ass differs from normalized, will commit"
            fi
          else
            echo "DEBUG: web/web.ass does not exist in HEAD, will add and commit"
          fi

          if [ ! -f "${MESSAGE_FILE}" ]; then
            echo "Archive web/web.ass (normalized to LF)" > /tmp/archive_msg.txt
            MESSAGE_FILE=/tmp/archive_msg.txt
          fi

          export GIT_AUTHOR_NAME="${AUTHOR_NAME}"
          export GIT_AUTHOR_EMAIL="${AUTHOR_EMAIL}"
          export GIT_COMMITTER_NAME="${AUTHOR_NAME}"
          export GIT_COMMITTER_EMAIL="${AUTHOR_EMAIL}"

          git add web/web.ass
          git commit -F "${MESSAGE_FILE}" -- web/web.ass || { echo "commit failed or nothing to commit"; exit 1; }
          echo "DEBUG: commit created, pushing to remote ${ARCHIVE_BRANCH}"

          git push "$REPO" "${ARCHIVE_BRANCH}:${ARCHIVE_BRANCH}"
          echo "archive_changed=true" >> $GITHUB_OUTPUT
          echo "DEBUG: push finished"

      - name: Summary
        run: |
          echo "Done."

